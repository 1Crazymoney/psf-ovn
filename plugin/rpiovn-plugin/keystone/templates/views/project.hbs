<link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">
  <style>
    h1, h2, h3, h4, h5, p, ul, ol, li {
      font-family: 'Montserrat', sans-serif;
      color: #594a42;
    }
    
    /*
    table, th, td {
      border: 1px solid black;
    }
    */
  </style>

<div class="container">  
	<div class="row">
		<div class="col-md-8">
			<h1>{{data.project.title}}</h1>
      {{{data.project.basicInfo}}}
    </div>  
    <div class="col-md-4">
      <img src="/images/rpi-tracker.jpg" class="img-responsive center-block" />
    </div>
  </div>
  
  <div class="row" style="background-color: #f7f7f9;">
   	<div class="col-md-12">
      <h2>Summary</h2>
      {{{data.project.summary}}}
    </div>
	</div>
  
  <div class="row">
   	<div class="col-md-12">
      <h2>Hardware</h2>
      {{{data.project.hardware}}}
    </div>
	</div>
  
  <div class="row" style="background-color: #f7f7f9;">
   	<div class="col-md-12">
      <h2>Software</h2>
      {{{data.project.software}}}
    </div>
	</div>
  
  <div class="row">
   	<div class="col-md-12" id="faqSection" hidden>
      <br>
      <h2>Frequently Asked Questions</h2>
      <div id="faqContent"></div>
    </div>
	</div> 
  
  <div class="row">
   	<div class="col-md-12" id="workSection">
      <br>
      <h2>Latest Work Entries</h2>
      <div id="workLogs">
        <table id="workTable" class="table table-striped table-bordered table-hover">
          <tr>
            <th>Date</th>
            <th>User</th>
            <th>Hours</th>
            <th>Description</th>
          </tr>
          <tr class="scaffold">
            
          </tr>
        </table>
      </div>
    </div>
	</div>
  
  <script type="text/javascript">
    
    //Global data about this project
    var projectData = {{{JSON data.project}}};
    var targetProj = [];
    switch(projectData._id) {
      //RPi-Tracker
      case "587d82ff1f064f586308b8bd":
        targetProj.push('597fafa0a27cfc03d2f7327f'); //RPi-Tracker
        targetProj.push('5803d685c0725f03c7ee9fef'); //CrumbShare
        break;
        
      //RPi-Broker
      case "59601280a27cfc03d2f7327a":
        targetProj.push("597fafa0a27cfc03d2f7327f");
        
      default:
        break;
    }
    
    
    //Global counter for tracking the number of entries.
    var logCnt = 0;
    
    $(document).ready(function() {
      
      //Get project FAQ info
      $.get('/api/projectinfo/list', '', function(data) {
        //debugger;
        
        var projectInfo = data.projectinfo;
        
        for(var i=0; i < projectInfo.length; i++) {
          var slug = "{{{data.project.slug}}}";
          
          //Ignore all projects except the one we're interested in.
          if(projectInfo[i].slug == slug) {

            if(projectInfo[i].faqTitle.length > 0) {
              $('#faqSection').prop('hidden', false)
      
              for(var j=0; j < projectInfo[i].faqTitle.length; j++) {
                $('#faqContent').append('<h3>'+projectInfo[i].faqTitle[j]+'</h3>');
                $('#faqContent').append(projectInfo[i].faqBody[j]);
                $('#faqContent').append('<br>');
              }
            }
          }
        }
        
      });
      
      //Get user data first
      var userPromise = getUsers();
      userPromise.then(function(users) {
        debugger;
        
        //Get work log info
        var page = 1;

        //Display the work entries on the DOM.
        displayWork(page);
        
      }, function(err) {
        debugger;
      });
      
    });
    
    function getUsers() {
      debugger;
      
      var promise = new Promise(function(resolve, reject) {
        
        $.get('/api/users/list', '', function(data) {
          debugger;
        
          resolve(data);
        });
        
      });
      
      return promise;
      
    }
    
    function getWork(obj) {
      var promise = new Promise(function(resolve, reject) {
        
        $.get('/api/logwork/list/last50', obj, function(data) {
          debugger;
        
          resolve(data.loggedwork);
        });
        
      });
      
      return promise;
    }
    
    function displayWork(page) {
      debugger;
      
      //Retrieve the first page of results from the server.
      var obj = {};
      obj.page = page;
      var workPromise = getWork(obj);
      //var logCnt = 0; //Counts the number of work entries that match this project.
      workPromise.then(function(work) {
        debugger;
        
        var scaffold = $('#workLogs').find('.scaffold');
        
        for(var j=0; j < targetProj.length; j++) {
          for(var i=0; i < work.results.length; i++) {
            if(work.results[i].project == targetProj[j]) {
              
              var thisEntry = scaffold.clone();
              
              var entryDate = new Date(work.results[i].startTime);
              
              //Replace newline characters with html <br> to force new line.
              var description = work.results[i].details.replace(/(\r\n|\n|\r)/gm,"<br>");
              
              thisEntry.append('<td>'+entryDate.toLocaleDateString()+'</td>');
              thisEntry.append('<td>'+work.results[i].user+'</td>');
              thisEntry.append('<td>'+work.results[i].hours+'</td>');
              thisEntry.append('<td>'+description+'</td>');
              
              $('#workTable').append(thisEntry);
              //$('#workLogs').append('<p>User: '+work.results[i].user+', Hours: '+work.results[i].hours+', Details: '+work.results[i].details+'</p>');

              logCnt++;
              if(logCnt >= 10) {
                break;
              }
            }
          }
          
          if(logCnt >= 10) {
            break;
          }
        }
        
        if(logCnt < 10) {
          page++
          displayWork(page);
        } else {
          logCnt = 0;
        }
        
      }, function(err) {
        debugger;
      });
    }
    
    
  </script>
</div>
